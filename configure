#!/bin/sh
#
# BashBuild v0.1.0 "Feature Complete"
#
# BashBuild is a minimal build system implemented entirely in the configure script.
#  Project setup is performed by modifying the variables at the top of the script.
#  Subprojects are handled by configure scripts in subdirectories, called recursively.
#

PROJECT="bashbuild-test"
VERSION="0.0.1"
SOURCES="foo.c bar.c"
OUTPUT="executable"
PREFIX="/usr/local"

SUBPROJECTS="subtest"

LIBDIRS="/home/foo/lib"
INCDIRS="/home/foo/inc"

LIBRARIES="m"

CCFLAGS="-c -Wall -g"
LDFLAGS=""

# Autodetect compiler paths
C_COMPILER=""
if [ -z "$C_COMPILER" ]; then C_COMPILER=`which gcc`; fi;
if [ -z "$C_COMPILER" ]; then C_COMPILER=`which cc`; fi;

CPP_COMPILER=""
if [ -z "$CPP_COMPILER" ]; then CPP_COMPILER=`which g++`; fi;
if [ -z "$CPP_COMPILER" ]; then CPP_COMPILER=`which c++`; fi;

while getopts "p:c:" Option
do
    case $Option in
	p ) PREFIX="$OPTARG";;
	c ) C_COMPILER=`which $OPTARG`;;
        * ) echo "./configure [-h] [-p install-prefix] [-c c-compiler]" >2;;
    esac
done

# Autodetect source file main directory
PROJDIR=`which $0 | sed 's/configure//'`
BUILDDIR=`pwd`

# Determine output file name
BINARY="$PROJECT"
if [ "$OUTPUT" == "shared" ]; then BINARY="lib$PROJECT.so"; fi;
if [ "$OUTPUT" == "static" ]; then BINARY="lib$PROJECT.a"; fi;

TMPFILE="Makefile.partial"

# Remove old makefile residue
rm -f Makefile "$TMPFILE"

# Print header
echo "
# Makfile for project: $PROJECT
#   Generated by BashBuild v0.1.0
#   On" `date` >> "$TMPFILE"

# Print important variables
echo "
PROJECT=$PROJECT
VERSION=$VERSION
LFLAGS=$LDFLAGS \$(foreach i,$LIBDIRS,-L\$(i)) \$(foreach i,$LIBRARIES,-l\$(i))
CFLAGS=$CCFLAGS \$(foreach i,$INCDIRS,-I\$(i))

SUBPROJECTS=$SUBPROJECTS

SOURCES=\$(foreach i,$SOURCES,$PROJDIR/\$(i))
SOURCES_TMP=\$(foreach i,$SOURCES,$BUILDDIR/\$(i))
OBJECTS_BLD=\$(SOURCES_TMP:.c=.o)
" >> "$TMPFILE"

# Print main rules
echo "
all: \$(SOURCES_PRJ) $BINARY

$BINARY: \$(OBJECTS_BLD) \$(SUBPROJECTS)
ifdef SOURCES" >> "$TMPFILE"
if      [ "$OUTPUT" == "shared" ]
    then echo "	$C_COMPILER -shared \$(OBJECTS_BLD) \$(LFLAGS) -o $BINARY" >> "$TMPFILE"
else if [ "$OUTPUT" == "static" ];
    then echo "	ar rcs $BINARY \$(OBJECTS_BLD)" >> "$TMPFILE"
    else echo "	$C_COMPILER \$(OBJECTS_BLD) \$(LFLAGS) -o $BINARY" >> "$TMPFILE"
fi; fi;
echo "endif # (SOURCES)" >> "$TMPFILE"

# Print source file inference rule and subproject build rule
echo "
$BUILDDIR/%.o: $PROJDIR/%.c
	$C_COMPILER \$(CFLAGS) -fPIC \$< -o \$@

\$(SUBPROJECTS):
	make -C \$@" >> "$TMPFILE"

echo "install:
	@ for i in \$(SUBPROJECTS); do make -C \$\${i} install; done" >> "$TMPFILE"
if [[ "$OUTPUT" == "shared" || "$OUTPUT" == "static" ]]
then
    echo "	install $BINARY $PREFIX/lib" >> "$TMPFILE"
else
    echo "	install $BINARY $PREFIX/bin" >> "$TMPFILE"
fi

# Miscellaneous Build Targets
echo "
tidy:
	@ for i in \$(SUBPROJECTS); do make -C \$\${i} tidy; done
	rm -f \$(OBJECTS_BLD)
clean:
	@ for i in \$(SUBPROJECTS); do make -C \$\${i} clean; done
	rm -f \$(OBJECTS_BLD) $BINARY
distclean:
	@ for i in \$(SUBPROJECTS); do make -C \$\${i} distclean; done
	rm -f \$(OBJECTS_BLD) $BINARY Makefile

.PHONY: install tidy clean distclean \$(SUBPROJECTS)" >> "$TMPFILE"

for dir in "$SUBPROJECTS"
do
    mkdir -p "$dir" && cd "$dir" && "$PROJDIR"/"$dir"/configure -p "$PREFIX" -c "C_COMPILER"
    cd "$BUILDDIR"
done

# Move the temporary makefile to the real one
mv "$TMPFILE" Makefile