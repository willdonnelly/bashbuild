#!/bin/sh
#
# BashBuild v0.0.0 "Not Yet"
#
# BashBuild is a minimal build system implemented entirely in the configure script.
#  Project setup is performed by modifying the variables at the top of the script.
#  Subprojects are handled by configure scripts in subdirectories, called recursively.
#

PROJECT="bashbuild-test"
VERSION="0.0.1"
SOURCES="foo.c bar.c"
OUTPUT="executable"

LIBDIRS="/home/foo/lib"
INCDIRS="/home/foo/inc"
LIBRARIES="m"

CCFLAGS="-c -Wall -g"
LDFLAGS=""

# Autodetect compiler paths
C_COMPILER=""
if [ -z "$C_COMPILER" ]; then C_COMPILER=`which gcc`; fi;
if [ -z "$C_COMPILER" ]; then C_COMPILER=`which cc`; fi;

CPP_COMPILER=""
if [ -z "$CPP_COMPILER" ]; then CPP_COMPILER=`which g++`; fi;
if [ -z "$CPP_COMPILER" ]; then CPP_COMPILER=`which c++`; fi;

# Autodetect source file main directory
PROJDIR=`which $0 | sed 's/configure//'`
BUILDDIR=`pwd`

# Determine output file name
BINARY="$PROJECT"
if [ "$OUTPUT" == "shared" ]; then BINARY="lib$PROJECT.so"; fi;
if [ "$OUTPUT" == "static" ]; then BINARY="lib$PROJECT.a"; fi;

TMPFILE="Makefile.partial"

# Print header
echo "# Makfile for project: $PROJECT" > "$TMPFILE"
echo "#   Generated by BashBuild v0.0.0" >> "$TMPFILE"
echo "#   On" `date` >> "$TMPFILE"
echo "" >> "$TMPFILE"

# Print important variables
echo "PROJECT=$PROJECT" >> "$TMPFILE"
echo "VERSION=$VERSION" >> "$TMPFILE"
echo "LFLAGS=$LDFLAGS \$(foreach i,$LIBDIRS,-L\$(i)) \$(foreach i,$LIBRARIES,-l\$(i))" >> "$TMPFILE"
echo "CFLAGS=$CCFLAGS \$(foreach i,$INCDIRS,-I\$(i))" >> "$TMPFILE"

echo "SOURCES_PRJ=\$(foreach i,$SOURCES,$PROJDIR/\$(i))" >> "$TMPFILE"
echo "SOURCES_BLD=\$(foreach i,$SOURCES,$BUILDDIR/\$(i))" >> "$TMPFILE"
echo "OBJECTS_PRJ=\$(SOURCES_PRJ:.c=.o)" >> "$TMPFILE"
echo "OBJECTS_BLD=\$(SOURCES_BLD:.c=.o)" >> "$TMPFILE"
echo "" >> "$TMPFILE"

# Print main rules
echo "all: \$(SOURCES_PRJ) $BINARY" >> "$TMPFILE"
echo "" >> "$TMPFILE"
echo "$BINARY: \$(OBJECTS_BLD)" >> "$TMPFILE"
if      [ "$OUTPUT" == "shared" ]
    then echo "	$C_COMPILER -shared \$(LFLAGS) \$(OBJECTS_BLD) -o $BINARY" >> "$TMPFILE"
else if [ "$OUTPUT" == "static" ];
    then echo "	ar rcs $BINARY \$(OBJECTS_BLD)" >> "$TMPFILE"
    else echo "	$C_COMPILER \$(LFLAGS) \$(OBJECTS_BLD) -o $BINARY" >> "$TMPFILE"
fi; fi;
echo "" >> "$TMPFILE"

# Print source file inference rule
echo "$BUILDDIR/%.o: $PROJDIR/%.c" >> "$TMPFILE"
echo "	$C_COMPILER \$(CFLAGS) -fPIC \$< -o \$@" >> "$TMPFILE"
echo "" >> "$TMPFILE"

echo "install:" >> "$TMPFILE"
if [[ "$OUTPUT" == "shared" || "$OUTPUT" == "static" ]]
then
    echo "	install $BINARY $PREFIX/lib" >> "$TMPFILE"
else
    echo "	install $BINARY $PREFIX/bin" >> "$TMPFILE"
fi

echo "tidy:" >> "$TMPFILE"
echo "	rm -f \$(OBJECTS_BLD)" >> "$TMPFILE"

echo "clean:" >> "$TMPFILE"
echo "	rm -f \$(OBJECTS_BLD) $BINARY" >> "$TMPFILE"

echo "distclean:" >> "$TMPFILE"
echo "	rm -f \$(OBJECTS_BLD) $BINARY Makefile" >> "$TMPFILE"

echo ".PHONY: install clean distclean" >> "$TMPFILE"

mv "$TMPFILE" Makefile